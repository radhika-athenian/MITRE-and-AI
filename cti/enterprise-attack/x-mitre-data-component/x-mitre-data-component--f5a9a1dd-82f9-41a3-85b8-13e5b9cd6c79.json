{
    "type": "bundle",
    "id": "bundle--829224c3-3820-4133-ad09-f2d8df6fae42",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "x-mitre-data-component",
            "id": "x-mitre-data-component--f5a9a1dd-82f9-41a3-85b8-13e5b9cd6c79",
            "created": "2021-10-20T15:05:19.274Z",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "revoked": false,
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "modified": "2025-04-18T15:14:52.372Z",
            "name": "Driver Metadata",
            "description": "to contextual data about a driver, including its attributes, functionality, and activity. This can involve details such as the driver's origin, integrity, cryptographic signature, issues reported during its use, and runtime behavior. Examples include metadata captured during driver integrity checks, hash validation, or error reporting. Examples: \n\n- Driver Signature Validation: A driver is validated to ensure it is signed by a trusted Certificate Authority (CA).\n- Driver Hash Verification: The hash of a driver is compared to a known good hash stored in a database.\n- Driver Compatibility Issues: A driver error is logged due to compatibility issues with a particular version of the operating system.\n- Vulnerable Driver Identification: Metadata indicates the driver version is outdated or contains a known vulnerability.\n- Monitoring Driver Integrity: Drivers are monitored for any unauthorized modifications to their binary or associated files.\n\nThis data component can be collected through the following measures:\n\nWindows\n\n- Windows Event Logs:\n    - Event ID 3000-3006: Logs metadata about driver signature validation.\n    - Event ID 2000-2011 (Windows Defender Application Control): Tracks driver integrity and policy enforcement.\n- Sysmon Logs: Configure Sysmon to capture driver loading metadata (Event ID 6).\n- Driver Verifier: Use Driver Verifier to collect diagnostic and performance data about drivers, including stability and compatibility metrics.\n- PowerShell: Use commands to retrieve metadata about installed drivers:\n`Get-WindowsDriver -Online | Select-Object Driver, ProviderName, Version`\n\nLinux\n\n- Auditd: Configure audit rules to monitor driver interactions and collect metadata: `auditctl -w /lib/modules/ -p rwxa -k driver_metadata`\n- dmesg: Use `dmesg` to extract kernel logs with driver metadata: `dmesg | grep \"module\"`\n- lsmod and modinfo: Commands to list loaded modules and retrieve metadata about drivers: `lsmod` | `modinfo <module_name>`\n\nmacOS\n\n- Unified Logs: Collect metadata from system logs about kernel extensions (kexts): `log show --predicate 'eventMessage contains \"kext load\"' --info`\n- kextstat: Command to retrieve information about loaded kernel extensions: `kextstat`\n\nSIEM Tools\n\n- Ingest Driver Metadata: Collect driver metadata logs from Sysmon, Auditd, or macOS logs into SIEMs like Splunk or Elastic.\n\nVulnerability Management Tools\n\n- Use these tools to collect metadata about vulnerable drivers across enterprise systems.",
            "x_mitre_data_source_ref": "x-mitre-data-source--9ec8c0d7-6137-456f-b829-c5f8b96ba054",
            "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "x_mitre_deprecated": false,
            "x_mitre_domains": [
                "enterprise-attack"
            ],
            "x_mitre_version": "1.1",
            "x_mitre_attack_spec_version": "3.2.0"
        }
    ]
}