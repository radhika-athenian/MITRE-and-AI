{
    "type": "bundle",
    "id": "bundle--52451a22-d8de-4679-a220-490ae97abd1d",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "relationship",
            "id": "relationship--07c4bc2b-c593-4fc2-b4f9-b52dadeb72b9",
            "created": "2022-03-30T14:26:51.866Z",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "revoked": false,
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "modified": "2025-04-16T21:54:54.156Z",
            "description": "Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. Typical command-line usage of rundll32.exe is <code>\"rundll32.exe DllFile,EntryPoint\"</code> where <code>DllFile</code> is the name of the DLL file being called and EntryPoint the name of the entry point in the DLL file. \n\nDLLs stored on SMB shares can similarly be called using the syntax of <code>\"rundll32.exe \\\\<ip_address>\\DllFile,EntryPoint\"</code> where <ip_address> is the IPv4 address of the host of the SMB share. \n\nRundll32 can also be used to execute arbitrary Javascript using the syntax <code>\"rundll32.exe javascript:<*code_block*>\"</code>where <*code_block*> is a string defining the Javascript code to be executed.  \n\n",
            "relationship_type": "detects",
            "source_ref": "x-mitre-data-component--685f917a-e95e-4ba0-ade1-c7d354dae6e0",
            "target_ref": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
            "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "x_mitre_deprecated": false,
            "x_mitre_attack_spec_version": "3.2.0"
        }
    ]
}