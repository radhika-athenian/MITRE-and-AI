{
    "type": "bundle",
    "id": "bundle--5d8de875-354b-46b0-846e-5297f1dd263e",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "relationship",
            "id": "relationship--ef647214-5ced-4457-9f80-3f6c5293da6a",
            "created": "2022-03-30T14:26:51.845Z",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "revoked": false,
            "external_references": [
                {
                    "source_name": "Elastic Process Injection July 2017",
                    "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
                    "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "modified": "2025-04-16T22:56:30.102Z",
            "description": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)\n\nSearch for remote thread creations that start at LoadLibraryA or LoadLibraryW. Depending on the tool, it may provide additional information about the DLL string that is an argument to the function. If there is any security software that legitimately injects DLLs, it must be carefully whitelisted.\n\nMicrosoft Windows allows for processes to remotely create threads within other processes of the same privilege level. This functionality is provided via the Windows API\u00a0CreateRemoteThread. Both Windows and third-party software use this ability for legitimate purposes. For example, the Windows process\u00a0csrss.exe\u00a0creates threads in programs to send signals to registered callback routines. Both adversaries and host-based security software use this functionality to\u00a0inject DLLs, but for very different purposes. An adversary is likely to inject into a program to\u00a0evade defenses\u00a0or\u00a0bypass User Account Control, but a security program might do this to gain increased monitoring of API calls. One of the most common methods of\u00a0DLL Injection\u00a0is through the Windows API\u00a0LoadLibrary.\n\n- Allocate memory in the target program with\u00a0VirtualAllocEx\n- Write the name of the DLL to inject into this program with\u00a0WriteProcessMemory\n- Create a new thread and set its entry point to\u00a0LoadLibrary\u00a0using the API\u00a0CreateRemoteThread.\n\nThis behavior can be detected by looking for thread creations across processes, and resolving the entry point to determine the function name. If the function is\u00a0LoadLibraryA\u00a0or\u00a0LoadLibraryW, then the intent of the remote thread is clearly to inject a DLL. When this is the case, the source process must be examined so that it can be ignored when it is both expected and a trusted process.\n",
            "relationship_type": "detects",
            "source_ref": "x-mitre-data-component--9bde2f9d-a695-4344-bfac-f2dce13d121e",
            "target_ref": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
            "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "x_mitre_deprecated": false,
            "x_mitre_attack_spec_version": "3.2.0"
        }
    ]
}