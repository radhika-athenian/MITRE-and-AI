{
    "type": "bundle",
    "id": "bundle--62bb456c-0b9c-4d73-94f9-876266de48f0",
    "spec_version": "2.0",
    "objects": [
        {
            "modified": "2024-12-10T18:52:40.747Z",
            "name": "Code Signing",
            "description": "Code Signing is a security process that ensures the authenticity and integrity of software by digitally signing executables, scripts, and other code artifacts. It prevents untrusted or malicious code from executing by verifying the digital signatures against trusted sources. Code signing protects against tampering, impersonation, and distribution of unauthorized or malicious software, forming a critical defense against supply chain and software exploitation attacks. This mitigation can be implemented through the following measures:\n\nEnforce Signed Code Execution:\n\n- Implementation: Configure operating systems (e.g., Windows with AppLocker or Linux with Secure Boot) to allow only signed code to execute.\n- Use Case: Prevent the execution of malicious PowerShell scripts by requiring all scripts to be signed with a trusted certificate.\n\nVendor-Signed Driver Enforcement:\n\n- Implementation: Enable kernel-mode code signing to ensure that only drivers signed by trusted vendors can be loaded.\n- Use Case: A malicious driver attempting to modify system memory fails to load because it lacks a valid signature.\n\nCertificate Revocation Management:\n\n- Implementation: Use Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs) to block certificates associated with compromised or deprecated code.\n- Use Case: A compromised certificate used to sign a malicious update is revoked, preventing further execution of the software.\n\nThird-Party Software Verification:\n\n- Implementation: Require software from external vendors to be signed with valid certificates before deployment.\n- Use Case: An organization only deploys signed and verified third-party software to prevent supply chain attacks.\n\nScript Integrity in CI/CD Pipelines:\n\n- Implementation: Integrate code signing into CI/CD pipelines to sign and verify code artifacts before production release.\n- Use Case: A software company ensures that all production builds are signed, preventing tampered builds from reaching customers.\n\n**Key Components of Code Signing**\n\n- Digital Signature Verification: Verifies the authenticity of code by ensuring it was signed by a trusted entity.\n- Certificate Management: Uses Public Key Infrastructure (PKI) to manage signing certificates and revocation lists.\n- Enforced Policy for Unsigned Code: Prevents the execution of unsigned or untrusted binaries and scripts.\n- Hash Integrity Check: Confirms that code has not been altered since signing by comparing cryptographic hashes.\n",
            "x_mitre_deprecated": false,
            "x_mitre_domains": [
                "enterprise-attack"
            ],
            "x_mitre_version": "1.2",
            "type": "course-of-action",
            "id": "course-of-action--590777b3-b475-4c7c-aaf8-f4a73b140312",
            "created": "2019-06-11T17:01:25.405Z",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "revoked": false,
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/mitigations/M1045",
                    "external_id": "M1045"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "x_mitre_attack_spec_version": "3.2.0",
            "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5"
        }
    ]
}